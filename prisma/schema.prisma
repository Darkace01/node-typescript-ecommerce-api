generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String @unique
  slug String @unique

  imageUrl        String?
  description     String?
  metaTitle       String?
  metaDescription String?
  published       Boolean @default(true)

  products Product[]

  @@map("category")
}

model Product {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String  @unique
  slug      String  @unique
  price     Float
  oldPrice  Float   @default(0)
  published Boolean @default(true)

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  images ProductImage[]

  @@index([categoryId])
  @@map("product")
}

model ProductImage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String
  imageUrl  String
  product   Product @relation(fields: [productId], references: [id])

  @@index([productId])
  @@map("productImage")
}

model Customer {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstname String
  lastname  String
  email     String @unique

  addresses Address[]

  orders Order[]

  @@map("customer")
}

model Address {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  streetAddress String
  city          String
  state         String
  country       String
  zipCode       String
  isDefault     Boolean @default(false)

  custormerId String
  customer    Customer @relation(fields: [custormerId], references: [id], onDelete: Cascade)

  @@index([custormerId])
  @@map("address")
}

model Order {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status     OrderStatus @default(PENDING)
  totalPrice Float

  orderItems  OrderItem[]
  custormerId String
  customer    Customer    @relation(fields: [custormerId], references: [id], onDelete: Cascade)

  @@index([custormerId])
  @@map("order")
}

enum OrderStatus {
  PENDING
  CANCELED
  COMPLETED
}

model OrderItem {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String
  quantity  Int

  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@map("orderItem")
}
